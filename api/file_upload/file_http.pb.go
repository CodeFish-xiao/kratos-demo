// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.1
// source: file_upload/file.proto

package file_upload

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFileUploadServiceUploadFile = "/demo.file_upload.FileUploadService/UploadFile"

type FileUploadServiceHTTPServer interface {
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileReply, error)
}

func RegisterFileUploadServiceHTTPServer(s *http.Server, srv FileUploadServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/file/upload", _FileUploadService_UploadFile0_HTTP_Handler(srv))
}

func _FileUploadService_UploadFile0_HTTP_Handler(srv FileUploadServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadFileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileUploadServiceUploadFile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadFile(ctx, req.(*UploadFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadFileReply)
		return ctx.Result(200, reply)
	}
}

type FileUploadServiceHTTPClient interface {
	UploadFile(ctx context.Context, req *UploadFileRequest, opts ...http.CallOption) (rsp *UploadFileReply, err error)
}

type FileUploadServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFileUploadServiceHTTPClient(client *http.Client) FileUploadServiceHTTPClient {
	return &FileUploadServiceHTTPClientImpl{client}
}

func (c *FileUploadServiceHTTPClientImpl) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...http.CallOption) (*UploadFileReply, error) {
	var out UploadFileReply
	pattern := "/api/v1/file/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFileUploadServiceUploadFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
