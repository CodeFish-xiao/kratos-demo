// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: redirect/redirect.proto

package redirect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RedirectService_Redirect_FullMethodName = "/demo.redirect.RedirectService/Redirect"
)

// RedirectServiceClient is the client API for RedirectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedirectServiceClient interface {
	Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (*RedirectReply, error)
}

type redirectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedirectServiceClient(cc grpc.ClientConnInterface) RedirectServiceClient {
	return &redirectServiceClient{cc}
}

func (c *redirectServiceClient) Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (*RedirectReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedirectReply)
	err := c.cc.Invoke(ctx, RedirectService_Redirect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedirectServiceServer is the server API for RedirectService service.
// All implementations must embed UnimplementedRedirectServiceServer
// for forward compatibility
type RedirectServiceServer interface {
	Redirect(context.Context, *RedirectRequest) (*RedirectReply, error)
	mustEmbedUnimplementedRedirectServiceServer()
}

// UnimplementedRedirectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRedirectServiceServer struct {
}

func (UnimplementedRedirectServiceServer) Redirect(context.Context, *RedirectRequest) (*RedirectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redirect not implemented")
}
func (UnimplementedRedirectServiceServer) mustEmbedUnimplementedRedirectServiceServer() {}

// UnsafeRedirectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedirectServiceServer will
// result in compilation errors.
type UnsafeRedirectServiceServer interface {
	mustEmbedUnimplementedRedirectServiceServer()
}

func RegisterRedirectServiceServer(s grpc.ServiceRegistrar, srv RedirectServiceServer) {
	s.RegisterService(&RedirectService_ServiceDesc, srv)
}

func _RedirectService_Redirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedirectServiceServer).Redirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedirectService_Redirect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedirectServiceServer).Redirect(ctx, req.(*RedirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedirectService_ServiceDesc is the grpc.ServiceDesc for RedirectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedirectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.redirect.RedirectService",
	HandlerType: (*RedirectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Redirect",
			Handler:    _RedirectService_Redirect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redirect/redirect.proto",
}
